/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package common;

import carrental.*;
import common.window.*;
import java.awt.Color;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableRowSorter;
import javax.swing.text.Document;
import org.apache.commons.dbcp.BasicDataSource;
import org.apache.derby.iapi.services.i18n.BundleFinder;
import org.apache.log4j.PropertyConfigurator;
import org.slf4j.LoggerFactory;

/**
 *
 * @author ansy
 */
public class MainWindow extends javax.swing.JFrame {

    private CarsManager carsManager;
    private DriversManager driversManager;
    private RentalsManager rentalsManager;
    private CarsTableModel carsModel;
    private DriversTableModel driversModel;
    private RentalsTableModel rentalsModel;
    private TableRowSorter<CarsTableModel> carsSorter;
    private TableRowSorter<DriversTableModel> driversSorter;
    private TableRowSorter<RentalsTableModel> rentalsSorter;
    private RowFilter<CarsTableModel, Integer> carsFilter;
    private RowFilter<DriversTableModel, Integer> driversFilter;
    private LocalesManager localesManager = new LocalesManager();
    private static ResourceBundle translator;
    private RowFilter<RentalsTableModel, Integer> rentalsFilter;
    private String filterCars = "";
    private String filterDrivers = "";
    private String filterRentals = "";
    private int showCars = 0;
    private int showRentals = 0;
    private int customSelection = 0;
    private Car customCar;
    private Driver customDriver;
    private int deleteChoice = 0;
    private List<Rental> customRentals;
    private static final Object LOCK = new Object();
    private FreeCarComboBoxModel freeCarComboBoxModel;
    private CarComboBoxModel carComboBoxModel;
    private DriverComboBoxModel driverComboBoxModel;
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(CarRental.class.getName());
    private boolean failedOnce = false;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        PropertyConfigurator.configure("log4j.properties");
        initManagers();

        // <editor-fold defaultstate="collapsed" desc="Generate test cases"> 
  /*    for (char i = 'a'; i <= 'z'; i++) {
         Car c = new Car();
         Driver d = new Driver();
         c.setMileage(20.0);
         c.setName(i + "");
         c.setSpz(i + "");
         c.setVin(i + "");
         d.setLicenseId(i + "");
         d.setName(i + "");
         d.setSurname(i + "");
         driversManager.createDriver(d);
         carsManager.createCar(c);
         }// </editor-fold>*/


        initComponents();
        initSortingFiltering();
        initComponents2();
        localeChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editors.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        CreateRentalDialog = new javax.swing.JDialog();
        jButtonCRDOk = new javax.swing.JButton();
        jButtonCRDCancel = new javax.swing.JButton();
        jComboBoxCRDCar = new javax.swing.JComboBox();
        jComboBoxCRDDriver = new javax.swing.JComboBox();
        jLabelCRDCar = new javax.swing.JLabel();
        jLabelCRDDriver = new javax.swing.JLabel();
        jLabelCRDPrice = new javax.swing.JLabel();
        jLabelCRDStartTime = new javax.swing.JLabel();
        jLabelCRDExEndTime = new javax.swing.JLabel();
        jXDatePickerCRDStartTime = new org.jdesktop.swingx.JXDatePicker();
        jXDatePickerCRDExEndTime = new org.jdesktop.swingx.JXDatePicker();
        jSpinnerCRDPrice = new javax.swing.JSpinner();
        CreateDriverDialog = new javax.swing.JDialog();
        jButtonCDDOk = new javax.swing.JButton();
        jButtonCDDCancel = new javax.swing.JButton();
        jLabelCDDName = new javax.swing.JLabel();
        jTextFieldCDDName = new javax.swing.JTextField();
        jLabelCDDSurname = new javax.swing.JLabel();
        jTextFieldCDDSurname = new javax.swing.JTextField();
        jLabelCDDLicenseId = new javax.swing.JLabel();
        jTextFieldCDDLicenseId = new javax.swing.JTextField();
        CreateCarDialog = new javax.swing.JDialog();
        jButtonCCDOk = new javax.swing.JButton();
        jButtonCCDCancel = new javax.swing.JButton();
        jLabelCCDVin = new javax.swing.JLabel();
        jTextFieldCCDVin = new javax.swing.JTextField();
        jLabelCCDLicensePlate = new javax.swing.JLabel();
        jTextFieldCCDLicensePlate = new javax.swing.JTextField();
        jLabelCCDModel = new javax.swing.JLabel();
        jTextFieldCCDModel = new javax.swing.JTextField();
        jLabelCCDMileage = new javax.swing.JLabel();
        jSpinnerCCDMileage = new javax.swing.JSpinner();
        AboutProgram = new javax.swing.JDialog();
        jButtonAPClose = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextAreaAboutProgram = new javax.swing.JTextArea();
        Options = new javax.swing.JDialog();
        jButtonOptionsOk = new javax.swing.JButton();
        jButtonOptionsCancel = new javax.swing.JButton();
        jComboBoxOptionsLanguage = new javax.swing.JComboBox();
        jLabelOptionsLanguage = new javax.swing.JLabel();
        DeleteWindow = new javax.swing.JDialog();
        jButtonDDYes = new javax.swing.JButton();
        jLabelDeleteDialog = new javax.swing.JLabel();
        jButtonDDNo = new javax.swing.JButton();
        InformationDialog = new javax.swing.JDialog();
        jButtonIDClose = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaIDinformation = new javax.swing.JTextArea();
        buttonGroup2 = new javax.swing.ButtonGroup();
        EditRentalDialog = new javax.swing.JDialog();
        jButtonERDOk = new javax.swing.JButton();
        jButtonERDCancel = new javax.swing.JButton();
        jComboBoxERDCar = new javax.swing.JComboBox();
        jComboBoxERDDriver = new javax.swing.JComboBox();
        jLabelERDCar = new javax.swing.JLabel();
        jLabelERDDriver = new javax.swing.JLabel();
        jLabelERDPrice = new javax.swing.JLabel();
        jLabelERDStartTime = new javax.swing.JLabel();
        jLabelERDExEndTime = new javax.swing.JLabel();
        jXDatePickerERDStartTime = new org.jdesktop.swingx.JXDatePicker();
        jXDatePickerERDExEndTime = new org.jdesktop.swingx.JXDatePicker();
        jLabelERDId = new javax.swing.JLabel();
        jLabelERDEndTime = new javax.swing.JLabel();
        jXDatePickerERDEndTime = new org.jdesktop.swingx.JXDatePicker();
        jTextFieldERDId = new javax.swing.JTextField();
        jSpinnerERDPrice = new javax.swing.JSpinner();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanelCars = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableCars = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        carSearchTextField = new javax.swing.JTextField();
        allCarsRadioButton = new javax.swing.JRadioButton();
        rentedCarsRadioButton = new javax.swing.JRadioButton();
        freeCarsRadioButton = new javax.swing.JRadioButton();
        addCarButton = new javax.swing.JButton();
        deleteCarButton = new javax.swing.JButton();
        carHistoryButton = new javax.swing.JButton();
        carsSearchLabel = new javax.swing.JLabel();
        jPanelDrivers = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableDrivers = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        driverSearchTextField = new javax.swing.JTextField();
        addDriverButton = new javax.swing.JButton();
        deleteDriverButton = new javax.swing.JButton();
        driverHistoryButton = new javax.swing.JButton();
        driversSearchLabel = new javax.swing.JLabel();
        jPanelRentals = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        rentalSearchTextField = new javax.swing.JTextField();
        allRentalsRadioButton = new javax.swing.JRadioButton();
        activeRentalsRadioButton = new javax.swing.JRadioButton();
        finishedRentalsRadioButton = new javax.swing.JRadioButton();
        createRentalButton = new javax.swing.JButton();
        deleteRentalButton = new javax.swing.JButton();
        editRentalButton = new javax.swing.JButton();
        rentalsSearchLabel = new javax.swing.JLabel();
        endRentalButton = new javax.swing.JButton();
        customRentalsRadioButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRentals = new javax.swing.JTable();
        statusBar = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItemRefresh = new javax.swing.JMenuItem();
        jMenuItemOptions = new javax.swing.JMenuItem();
        jMenuItemAbout = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();

        CreateRentalDialog.setTitle("Create Rental");
        CreateRentalDialog.setMinimumSize(new java.awt.Dimension(450, 230));
        CreateRentalDialog.setModal(true);
        CreateRentalDialog.setResizable(false);

        jButtonCRDOk.setText("OK");
        jButtonCRDOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCRDOkActionPerformed(evt);
            }
        });

        jButtonCRDCancel.setText("Cancel");
        jButtonCRDCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCRDCancelActionPerformed(evt);
            }
        });

        jComboBoxCRDCar.setModel(freeCarComboBoxModel);
        jComboBoxCRDCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCRDCarActionPerformed(evt);
            }
        });

        jComboBoxCRDDriver.setModel(driverComboBoxModel);
        jComboBoxCRDDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCRDDriverActionPerformed(evt);
            }
        });

        jLabelCRDCar.setText("Car");

        jLabelCRDDriver.setText("Driver");

        jLabelCRDPrice.setText("Price");

        jLabelCRDStartTime.setText("Start Time");

        jLabelCRDExEndTime.setText("Expected End time");

        jXDatePickerCRDStartTime.setLightWeightPopupEnabled(false);
        jXDatePickerCRDStartTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePickerCRDStartTimeActionPerformed(evt);
            }
        });

        jXDatePickerCRDExEndTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePickerCRDExEndTimeActionPerformed(evt);
            }
        });

        jSpinnerCRDPrice.setModel(new javax.swing.SpinnerNumberModel(1000.0d, 0.0d, 50000.0d, 100.0d));

        javax.swing.GroupLayout CreateRentalDialogLayout = new javax.swing.GroupLayout(CreateRentalDialog.getContentPane());
        CreateRentalDialog.getContentPane().setLayout(CreateRentalDialogLayout);
        CreateRentalDialogLayout.setHorizontalGroup(
            CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateRentalDialogLayout.createSequentialGroup()
                .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateRentalDialogLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabelCRDCar))
                    .addGroup(CreateRentalDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelCRDPrice))
                    .addGroup(CreateRentalDialogLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabelCRDDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CreateRentalDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCRDExEndTime)
                            .addComponent(jLabelCRDStartTime))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateRentalDialogLayout.createSequentialGroup()
                        .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxCRDDriver, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxCRDCar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateRentalDialogLayout.createSequentialGroup()
                        .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSpinnerCRDPrice, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jXDatePickerCRDExEndTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                            .addComponent(jXDatePickerCRDStartTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateRentalDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonCRDCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCRDOk, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        CreateRentalDialogLayout.setVerticalGroup(
            CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateRentalDialogLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCRDCar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCRDCar))
                .addGap(10, 10, 10)
                .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxCRDDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCRDDriver))
                .addGap(5, 5, 5)
                .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCRDPrice)
                    .addComponent(jSpinnerCRDPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCRDStartTime)
                    .addComponent(jXDatePickerCRDStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCRDExEndTime)
                    .addComponent(jXDatePickerCRDExEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(CreateRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCRDOk)
                    .addComponent(jButtonCRDCancel)))
        );

        CreateDriverDialog.setTitle("Create Driver");
        CreateDriverDialog.setMinimumSize(new java.awt.Dimension(300, 160));
        CreateDriverDialog.setModal(true);
        CreateDriverDialog.setResizable(false);

        jButtonCDDOk.setText("OK");
        jButtonCDDOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCDDOkActionPerformed(evt);
            }
        });

        jButtonCDDCancel.setText("Cancel");
        jButtonCDDCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCDDCancelActionPerformed(evt);
            }
        });

        jLabelCDDName.setText("Name");

        jTextFieldCDDName.setToolTipText("Name");
        jTextFieldCDDName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCDDNameActionPerformed(evt);
            }
        });

        jLabelCDDSurname.setText("Surname");

        jTextFieldCDDSurname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCDDSurnameActionPerformed(evt);
            }
        });

        jLabelCDDLicenseId.setText("Licence ID");

        jTextFieldCDDLicenseId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCDDLicenseIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CreateDriverDialogLayout = new javax.swing.GroupLayout(CreateDriverDialog.getContentPane());
        CreateDriverDialog.getContentPane().setLayout(CreateDriverDialogLayout);
        CreateDriverDialogLayout.setHorizontalGroup(
            CreateDriverDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateDriverDialogLayout.createSequentialGroup()
                .addGroup(CreateDriverDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateDriverDialogLayout.createSequentialGroup()
                        .addGap(0, 115, Short.MAX_VALUE)
                        .addComponent(jButtonCDDCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCDDOk, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CreateDriverDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(CreateDriverDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCDDLicenseId)
                            .addComponent(jLabelCDDSurname)
                            .addComponent(jLabelCDDName))
                        .addGroup(CreateDriverDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldCDDName)
                            .addComponent(jTextFieldCDDSurname)
                            .addComponent(jTextFieldCDDLicenseId))))
                .addContainerGap())
        );
        CreateDriverDialogLayout.setVerticalGroup(
            CreateDriverDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateDriverDialogLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(CreateDriverDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCDDName)
                    .addComponent(jTextFieldCDDName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateDriverDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCDDSurname)
                    .addComponent(jTextFieldCDDSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateDriverDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCDDLicenseId)
                    .addComponent(jTextFieldCDDLicenseId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(CreateDriverDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCDDOk)
                    .addComponent(jButtonCDDCancel))
                .addGap(0, 0, 0))
        );

        CreateCarDialog.setTitle("Create Car");
        CreateCarDialog.setMinimumSize(new java.awt.Dimension(340, 200));
        CreateCarDialog.setModal(true);
        CreateCarDialog.setResizable(false);

        jButtonCCDOk.setText("OK");
        jButtonCCDOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCCDOkActionPerformed(evt);
            }
        });

        jButtonCCDCancel.setText("Cancel");
        jButtonCCDCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCCDCancelActionPerformed(evt);
            }
        });

        jLabelCCDVin.setText("VIN");

        jTextFieldCCDVin.setToolTipText("Name");
        jTextFieldCCDVin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCCDVinActionPerformed(evt);
            }
        });

        jLabelCCDLicensePlate.setText("License plate");
        jLabelCCDLicensePlate.setMaximumSize(new java.awt.Dimension(100, 18));
        jLabelCCDLicensePlate.setMinimumSize(new java.awt.Dimension(100, 18));
        jLabelCCDLicensePlate.setPreferredSize(new java.awt.Dimension(100, 18));

        jTextFieldCCDLicensePlate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCCDLicensePlateActionPerformed(evt);
            }
        });

        jLabelCCDModel.setText("Model");

        jTextFieldCCDModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCCDModelActionPerformed(evt);
            }
        });

        jLabelCCDMileage.setText("Mileage");

        jSpinnerCCDMileage.setModel(new javax.swing.SpinnerNumberModel(10000.0d, 0.0d, 500000.0d, 1000.0d));

        javax.swing.GroupLayout CreateCarDialogLayout = new javax.swing.GroupLayout(CreateCarDialog.getContentPane());
        CreateCarDialog.getContentPane().setLayout(CreateCarDialogLayout);
        CreateCarDialogLayout.setHorizontalGroup(
            CreateCarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateCarDialogLayout.createSequentialGroup()
                .addGroup(CreateCarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateCarDialogLayout.createSequentialGroup()
                        .addGap(0, 167, Short.MAX_VALUE)
                        .addComponent(jButtonCCDCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCCDOk, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CreateCarDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(CreateCarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelCCDMileage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelCCDLicensePlate, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(jLabelCCDModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelCCDVin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(CreateCarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldCCDLicensePlate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldCCDModel)
                            .addComponent(jTextFieldCCDVin)
                            .addComponent(jSpinnerCCDMileage))))
                .addContainerGap())
        );
        CreateCarDialogLayout.setVerticalGroup(
            CreateCarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CreateCarDialogLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(CreateCarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCCDVin)
                    .addComponent(jTextFieldCCDVin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateCarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldCCDLicensePlate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(CreateCarDialogLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabelCCDLicensePlate, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(CreateCarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCCDModel)
                    .addComponent(jTextFieldCCDModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(CreateCarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCCDMileage)
                    .addComponent(jSpinnerCCDMileage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(CreateCarDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCCDOk)
                    .addComponent(jButtonCCDCancel)))
        );

        AboutProgram.setTitle("About");
        AboutProgram.setAlwaysOnTop(true);
        AboutProgram.setMinimumSize(new java.awt.Dimension(250, 180));
        AboutProgram.setModal(true);
        AboutProgram.setResizable(false);

        jButtonAPClose.setText("Close");
        jButtonAPClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAPCloseActionPerformed(evt);
            }
        });

        jTextAreaAboutProgram.setEditable(false);
        jTextAreaAboutProgram.setColumns(20);
        jTextAreaAboutProgram.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaAboutProgram.setRows(5);
        jTextAreaAboutProgram.setText("Version 0.1");
        jTextAreaAboutProgram.setFocusable(false);
        jScrollPane3.setViewportView(jTextAreaAboutProgram);

        javax.swing.GroupLayout AboutProgramLayout = new javax.swing.GroupLayout(AboutProgram.getContentPane());
        AboutProgram.getContentPane().setLayout(AboutProgramLayout);
        AboutProgramLayout.setHorizontalGroup(
            AboutProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AboutProgramLayout.createSequentialGroup()
                .addGroup(AboutProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AboutProgramLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAPClose, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(AboutProgramLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)))
                .addContainerGap())
        );
        AboutProgramLayout.setVerticalGroup(
            AboutProgramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AboutProgramLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAPClose)
                .addGap(5, 5, 5))
        );

        Options.setTitle("Options");
        Options.setMinimumSize(new java.awt.Dimension(250, 110));
        Options.setModal(true);
        Options.setResizable(false);

        jButtonOptionsOk.setText("OK");
        jButtonOptionsOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOptionsOkActionPerformed(evt);
            }
        });

        jButtonOptionsCancel.setText("Cancel");
        jButtonOptionsCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOptionsCancelActionPerformed(evt);
            }
        });

        jComboBoxOptionsLanguage.setModel(new LocaleComboBoxModel());
        jComboBoxOptionsLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOptionsLanguageActionPerformed(evt);
            }
        });

        jLabelOptionsLanguage.setText("Language");

        javax.swing.GroupLayout OptionsLayout = new javax.swing.GroupLayout(Options.getContentPane());
        Options.getContentPane().setLayout(OptionsLayout);
        OptionsLayout.setHorizontalGroup(
            OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonOptionsCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOptionsOk, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(OptionsLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabelOptionsLanguage)
                .addGap(13, 13, 13)
                .addComponent(jComboBoxOptionsLanguage, 0, 162, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );
        OptionsLayout.setVerticalGroup(
            OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsLayout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxOptionsLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelOptionsLanguage))
                .addGap(10, 10, 10)
                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOptionsOk)
                    .addComponent(jButtonOptionsCancel)))
        );

        DeleteWindow.setTitle("Delete Dialog");
        DeleteWindow.setAlwaysOnTop(true);
        DeleteWindow.setMinimumSize(new java.awt.Dimension(280, 120));
        DeleteWindow.setModal(true);
        DeleteWindow.setResizable(false);

        jButtonDDYes.setText("Yes");
        jButtonDDYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDDYesActionPerformed(evt);
            }
        });

        jLabelDeleteDialog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDeleteDialog.setText("Do you really wish to delete?");

        jButtonDDNo.setText("No");
        jButtonDDNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDDNoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DeleteWindowLayout = new javax.swing.GroupLayout(DeleteWindow.getContentPane());
        DeleteWindow.getContentPane().setLayout(DeleteWindowLayout);
        DeleteWindowLayout.setHorizontalGroup(
            DeleteWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DeleteWindowLayout.createSequentialGroup()
                .addContainerGap(98, Short.MAX_VALUE)
                .addComponent(jButtonDDNo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDDYes)
                .addGap(100, 100, 100))
            .addGroup(DeleteWindowLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabelDeleteDialog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7))
        );
        DeleteWindowLayout.setVerticalGroup(
            DeleteWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DeleteWindowLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabelDeleteDialog, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(DeleteWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDDYes)
                    .addComponent(jButtonDDNo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        InformationDialog.setTitle("Information dialog");
        InformationDialog.setMinimumSize(new java.awt.Dimension(386, 250));
        InformationDialog.setModal(true);

        jButtonIDClose.setText("Close");
        jButtonIDClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIDCloseActionPerformed(evt);
            }
        });

        jTextAreaIDinformation.setEditable(false);
        jTextAreaIDinformation.setColumns(20);
        jTextAreaIDinformation.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaIDinformation.setRows(5);
        jScrollPane4.setViewportView(jTextAreaIDinformation);

        javax.swing.GroupLayout InformationDialogLayout = new javax.swing.GroupLayout(InformationDialog.getContentPane());
        InformationDialog.getContentPane().setLayout(InformationDialogLayout);
        InformationDialogLayout.setHorizontalGroup(
            InformationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InformationDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InformationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                    .addComponent(jButtonIDClose, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        InformationDialogLayout.setVerticalGroup(
            InformationDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InformationDialogLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jButtonIDClose)
                .addGap(5, 5, 5))
        );

        EditRentalDialog.setTitle("Edit Rental");
        EditRentalDialog.setMinimumSize(new java.awt.Dimension(500, 300));
        EditRentalDialog.setModal(true);

        jButtonERDOk.setText("OK");
        jButtonERDOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonERDOkActionPerformed(evt);
            }
        });

        jButtonERDCancel.setText("Cancel");
        jButtonERDCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonERDCancelActionPerformed(evt);
            }
        });

        jComboBoxERDCar.setModel(carComboBoxModel);
        jComboBoxERDCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxERDCarActionPerformed(evt);
            }
        });

        jComboBoxERDDriver.setModel(driverComboBoxModel);
        jComboBoxERDDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxERDDriverActionPerformed(evt);
            }
        });

        jLabelERDCar.setText("Car");

        jLabelERDDriver.setText("Driver");

        jLabelERDPrice.setText("Price");

        jLabelERDStartTime.setText("Start Time");

        jLabelERDExEndTime.setText("Expected End time");

        jLabelERDId.setText("Id");

        jLabelERDEndTime.setText("End Time");

        jTextFieldERDId.setEditable(false);
        jTextFieldERDId.setText("jTextField1");
        jTextFieldERDId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldERDIdActionPerformed(evt);
            }
        });

        jSpinnerERDPrice.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 50000.0d, 100.0d));

        javax.swing.GroupLayout EditRentalDialogLayout = new javax.swing.GroupLayout(EditRentalDialog.getContentPane());
        EditRentalDialog.getContentPane().setLayout(EditRentalDialogLayout);
        EditRentalDialogLayout.setHorizontalGroup(
            EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EditRentalDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EditRentalDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonERDCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonERDOk, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EditRentalDialogLayout.createSequentialGroup()
                        .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelERDId, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelERDDriver, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addComponent(jLabelERDPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelERDCar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxERDCar, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxERDDriver, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextFieldERDId)
                            .addComponent(jSpinnerERDPrice)))
                    .addGroup(EditRentalDialogLayout.createSequentialGroup()
                        .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelERDEndTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelERDStartTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelERDExEndTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jXDatePickerERDStartTime, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                            .addComponent(jXDatePickerERDExEndTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jXDatePickerERDEndTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        EditRentalDialogLayout.setVerticalGroup(
            EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EditRentalDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelERDId)
                    .addComponent(jTextFieldERDId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxERDCar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelERDCar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelERDDriver)
                    .addComponent(jComboBoxERDDriver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelERDPrice)
                    .addComponent(jSpinnerERDPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelERDStartTime)
                    .addComponent(jXDatePickerERDStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelERDExEndTime)
                    .addComponent(jXDatePickerERDExEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelERDEndTime)
                    .addComponent(jXDatePickerERDEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(EditRentalDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonERDCancel)
                    .addComponent(jButtonERDOk))
                .addGap(5, 5, 5))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);

        jTabbedPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTabbedPane2.setRequestFocusEnabled(false);

        jPanelCars.setName(""); // NOI18N

        jTableCars.setModel(carsModel);
        jTableCars.setEditingColumn(0);
        jTableCars.setEditingRow(0);
        jTableCars.setMinimumSize(new java.awt.Dimension(300, 150));
        jTableCars.setName(""); // NOI18N
        jTableCars.setRequestFocusEnabled(false);
        jTableCars.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(jTableCars);
        jTableCars.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        carSearchTextField.setToolTipText("Search");
        carSearchTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        carSearchTextField.setName(""); // NOI18N
        carSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carSearchTextFieldActionPerformed(evt);
            }
        });

        buttonGroup1.add(allCarsRadioButton);
        allCarsRadioButton.setSelected(true);
        allCarsRadioButton.setText("All");
        allCarsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCarsRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(rentedCarsRadioButton);
        rentedCarsRadioButton.setText("Rented");
        rentedCarsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentedCarsRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(freeCarsRadioButton);
        freeCarsRadioButton.setText("Free");
        freeCarsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freeCarsRadioButtonActionPerformed(evt);
            }
        });

        addCarButton.setText("Add Car");
        addCarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCarButtonActionPerformed(evt);
            }
        });

        deleteCarButton.setText("Delete Car");
        deleteCarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCarButtonActionPerformed(evt);
            }
        });

        carHistoryButton.setText("Car History");
        carHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carHistoryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(allCarsRadioButton)
                    .addComponent(rentedCarsRadioButton)
                    .addComponent(freeCarsRadioButton))
                .addContainerGap(58, Short.MAX_VALUE))
            .addComponent(carSearchTextField)
            .addComponent(addCarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(deleteCarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(carHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(carSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(allCarsRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(rentedCarsRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(freeCarsRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(addCarButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteCarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(carHistoryButton)
                .addGap(0, 295, Short.MAX_VALUE))
        );

        carSearchTextField.getAccessibleContext().setAccessibleName("");

        carsSearchLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        carsSearchLabel.setText("Search");
        carsSearchLabel.setAutoscrolls(true);
        carsSearchLabel.setMinimumSize(new java.awt.Dimension(49, 28));
        carsSearchLabel.setPreferredSize(new java.awt.Dimension(49, 28));

        javax.swing.GroupLayout jPanelCarsLayout = new javax.swing.GroupLayout(jPanelCars);
        jPanelCars.setLayout(jPanelCarsLayout);
        jPanelCarsLayout.setHorizontalGroup(
            jPanelCarsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCarsLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 869, Short.MAX_VALUE)
                .addGroup(jPanelCarsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(carsSearchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanelCarsLayout.setVerticalGroup(
            jPanelCarsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
            .addGroup(jPanelCarsLayout.createSequentialGroup()
                .addComponent(carsSearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Cars", jPanelCars);

        jPanelDrivers.setName(""); // NOI18N

        jTableDrivers.setModel(driversModel);
        jTableDrivers.setEditingColumn(0);
        jTableDrivers.setEditingRow(0);
        jTableDrivers.setMinimumSize(new java.awt.Dimension(300, 150));
        jTableDrivers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane7.setViewportView(jTableDrivers);
        jTableDrivers.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        addDriverButton.setText("Add Driver");
        addDriverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDriverButtonActionPerformed(evt);
            }
        });

        deleteDriverButton.setText("Delete Driver");
        deleteDriverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDriverButtonActionPerformed(evt);
            }
        });

        driverHistoryButton.setText("Driver History");
        driverHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driverHistoryButtonActionPerformed(evt);
            }
        });

        driversSearchLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        driversSearchLabel.setText("Search");
        driversSearchLabel.setAutoscrolls(true);
        driversSearchLabel.setMinimumSize(new java.awt.Dimension(49, 28));
        driversSearchLabel.setPreferredSize(new java.awt.Dimension(49, 28));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(driverSearchTextField)
            .addComponent(addDriverButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(deleteDriverButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(driverHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(driversSearchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(driversSearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(driverSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(addDriverButton)
                .addGap(0, 0, 0)
                .addComponent(deleteDriverButton)
                .addGap(0, 0, 0)
                .addComponent(driverHistoryButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelDriversLayout = new javax.swing.GroupLayout(jPanelDrivers);
        jPanelDrivers.setLayout(jPanelDriversLayout);
        jPanelDriversLayout.setHorizontalGroup(
            jPanelDriversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDriversLayout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 869, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelDriversLayout.setVerticalGroup(
            jPanelDriversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Drivers", jPanelDrivers);

        jPanelRentals.setName(""); // NOI18N

        rentalSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentalSearchTextFieldActionPerformed(evt);
            }
        });

        buttonGroup2.add(allRentalsRadioButton);
        allRentalsRadioButton.setSelected(true);
        allRentalsRadioButton.setText("All");
        allRentalsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRentalsRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(activeRentalsRadioButton);
        activeRentalsRadioButton.setText("Active");
        activeRentalsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeRentalsRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(finishedRentalsRadioButton);
        finishedRentalsRadioButton.setText("Finished");
        finishedRentalsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedRentalsRadioButtonActionPerformed(evt);
            }
        });

        createRentalButton.setText("Create Rental");
        createRentalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRentalButtonActionPerformed(evt);
            }
        });

        deleteRentalButton.setText("Delete Rental");
        deleteRentalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRentalButtonActionPerformed(evt);
            }
        });

        editRentalButton.setText("Edit Rental");
        editRentalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRentalButtonActionPerformed(evt);
            }
        });

        rentalsSearchLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rentalsSearchLabel.setText("Search");
        rentalsSearchLabel.setAutoscrolls(true);
        rentalsSearchLabel.setMinimumSize(new java.awt.Dimension(49, 28));
        rentalsSearchLabel.setPreferredSize(new java.awt.Dimension(49, 28));

        endRentalButton.setText("End Rental");
        endRentalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endRentalButtonActionPerformed(evt);
            }
        });

        buttonGroup2.add(customRentalsRadioButton);
        customRentalsRadioButton.setText("Custom");
        customRentalsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customRentalsRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rentalSearchTextField)
            .addComponent(createRentalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(deleteRentalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(editRentalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rentalsSearchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
            .addComponent(endRentalButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(allRentalsRadioButton)
                    .addComponent(activeRentalsRadioButton)
                    .addComponent(finishedRentalsRadioButton)
                    .addComponent(customRentalsRadioButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(rentalsSearchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(rentalSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(allRentalsRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(activeRentalsRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(finishedRentalsRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(customRentalsRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(createRentalButton)
                .addGap(0, 0, 0)
                .addComponent(deleteRentalButton)
                .addGap(0, 0, 0)
                .addComponent(editRentalButton)
                .addGap(0, 0, 0)
                .addComponent(endRentalButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTableRentals.setModel(rentalsModel);
        jTableRentals.setEditingColumn(0);
        jTableRentals.setEditingRow(0);
        jTableRentals.setMinimumSize(new java.awt.Dimension(300, 150));
        jTableRentals.setRequestFocusEnabled(false);
        jTableRentals.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTableRentals);

        javax.swing.GroupLayout jPanelRentalsLayout = new javax.swing.GroupLayout(jPanelRentals);
        jPanelRentals.setLayout(jPanelRentalsLayout);
        jPanelRentalsLayout.setHorizontalGroup(
            jPanelRentalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRentalsLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 869, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanelRentalsLayout.setVerticalGroup(
            jPanelRentalsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Rentals", jPanelRentals);

        statusBar.setEditable(false);
        statusBar.setDisabledTextColor(new java.awt.Color(70, 70, 70));
        statusBar.setEnabled(false);
        statusBar.setFocusable(false);
        statusBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusBarActionPerformed(evt);
            }
        });

        jMenu4.setText("Menu");
        jMenu4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenu4KeyPressed(evt);
            }
        });

        jMenuItemRefresh.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItemRefresh.setText("Refresh");
        jMenuItemRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRefreshActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemRefresh);

        jMenuItemOptions.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOptions.setText("Options");
        jMenuItemOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOptionsActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemOptions);

        jMenuItemAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItemAbout.setText("About Program");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemAbout);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemExit.setText("Exit");
        jMenuItemExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItemExitMouseClicked(evt);
            }
        });
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemExit);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
            .addComponent(statusBar)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane2)
                .addGap(0, 0, 0)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jTabbedPane2.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // <editor-fold defaultstate="expanded" desc="Actions performed">  
    private void jMenu4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenu4KeyPressed
        // TODO add your handling code here:        
    }//GEN-LAST:event_jMenu4KeyPressed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:        
        //  dispose();
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItemExitMouseClicked
        // TODO add your handling code here:       
    }//GEN-LAST:event_jMenuItemExitMouseClicked

    private void jMenuItemOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOptionsActionPerformed
        //     this.jComboBoxOptionsLanguage.setModel(new LocaleComboBoxModel());
        this.jComboBoxOptionsLanguage.setSelectedItem(this.localesManager.getLocale());
        Options.setLocationRelativeTo(this);
        Options.setVisible(true);
    }//GEN-LAST:event_jMenuItemOptionsActionPerformed

    private void allCarsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allCarsRadioButtonActionPerformed
        showCars = 0;
        carsSorter.setRowFilter(carsFilter);
    }//GEN-LAST:event_allCarsRadioButtonActionPerformed

    private void rentedCarsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentedCarsRadioButtonActionPerformed
        showCars = 2;
        carsSorter.setRowFilter(carsFilter);
    }//GEN-LAST:event_rentedCarsRadioButtonActionPerformed

    private void freeCarsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeCarsRadioButtonActionPerformed
        showCars = 1;
        carsSorter.setRowFilter(carsFilter);
    }//GEN-LAST:event_freeCarsRadioButtonActionPerformed

    private void addCarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCarButtonActionPerformed
        this.clearCreateCarDialog();
        this.CreateCarDialog.setLocationRelativeTo(this);
        this.CreateCarDialog.setVisible(true);
    }//GEN-LAST:event_addCarButtonActionPerformed

    private void deleteCarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCarButtonActionPerformed
        DeleteCarSwingWorker deleteCarSwingWorker = new DeleteCarSwingWorker();
        deleteCarSwingWorker.execute();
    }//GEN-LAST:event_deleteCarButtonActionPerformed

    private void addDriverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDriverButtonActionPerformed
        this.clearCreateDriverDialog();
        this.CreateDriverDialog.setLocationRelativeTo(this);
        this.CreateDriverDialog.setVisible(true);
    }//GEN-LAST:event_addDriverButtonActionPerformed

    private void deleteDriverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDriverButtonActionPerformed
        DeleteDriverSwingWorker deleteDriverSwingWorker = new DeleteDriverSwingWorker();
        deleteDriverSwingWorker.execute();
    }//GEN-LAST:event_deleteDriverButtonActionPerformed

    private void allRentalsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRentalsRadioButtonActionPerformed
        showRentals = 0;
        rentalsSorter.setRowFilter(rentalsFilter);
    }//GEN-LAST:event_allRentalsRadioButtonActionPerformed

    private void activeRentalsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeRentalsRadioButtonActionPerformed
        showRentals = 1;
        rentalsSorter.setRowFilter(rentalsFilter);
    }//GEN-LAST:event_activeRentalsRadioButtonActionPerformed

    private void finishedRentalsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedRentalsRadioButtonActionPerformed
        showRentals = 2;
        rentalsSorter.setRowFilter(rentalsFilter);
    }//GEN-LAST:event_finishedRentalsRadioButtonActionPerformed

    private void createRentalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRentalButtonActionPerformed
        this.clearCreateRentalDialog();
        this.CreateRentalDialog.setLocationRelativeTo(this);
        this.CreateRentalDialog.setVisible(true);
    }//GEN-LAST:event_createRentalButtonActionPerformed

    private void deleteRentalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRentalButtonActionPerformed
        if (jTableRentals.isEditing()) {
            SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("rental.stopEditRow"));
            status.execute();
        } else {
            int row = jTableRentals.getSelectedRow();
            if (row != -1) {

                deleteChoice = 2;
                DeleteWindow.setLocationRelativeTo(MainWindow.this);
                DeleteWindow.setVisible(true);

            } else {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("general.selectRow"));
                status.execute();
            }
        }
    }//GEN-LAST:event_deleteRentalButtonActionPerformed

    private void carHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carHistoryButtonActionPerformed
        CarHistorySwingWorker carHistorySwingWorker = new CarHistorySwingWorker();
        carHistorySwingWorker.execute();
    }//GEN-LAST:event_carHistoryButtonActionPerformed

    private void driverHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driverHistoryButtonActionPerformed
        DriverHistorySwingWorker driverHistorySwingWorker = new DriverHistorySwingWorker();
        driverHistorySwingWorker.execute();
    }//GEN-LAST:event_driverHistoryButtonActionPerformed

    private void editRentalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRentalButtonActionPerformed

        //get selected row
        int row = jTableRentals.getSelectedRow();

        if (row != -1) {
            //get selected rental
            Rental selectedRental = this.rentalsModel.getRental(row);

            //comboboxes - set current value
            this.jComboBoxERDCar.setSelectedItem(selectedRental.getCar());
            this.jComboBoxERDDriver.setSelectedItem(selectedRental.getDriver());

            //get data and set data to dialog
            this.jTextFieldERDId.setText(selectedRental.getId().toString());
            this.jSpinnerERDPrice.setValue(selectedRental.getPrice());
            this.jXDatePickerERDStartTime.setDate(selectedRental.getStartTime().getTime());
            this.jXDatePickerERDExEndTime.setDate(selectedRental.getExpectedEndTime().getTime());

            //set endTime
            if (selectedRental.getEndTime() != null) {
                this.jXDatePickerERDEndTime.setDate(selectedRental.getEndTime().getTime());
            } else {
                this.jXDatePickerERDEndTime.setDate(null);
            }

            //set dialog visible
            this.EditRentalDialog.setLocationRelativeTo(this);
            this.EditRentalDialog.setVisible(true);
        } else {

            SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("general.selectRow"));
            status.execute();
        }
    }//GEN-LAST:event_editRentalButtonActionPerformed

    private void jTextFieldCDDLicenseIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCDDLicenseIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCDDLicenseIdActionPerformed

    private void jTextFieldCDDSurnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCDDSurnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCDDSurnameActionPerformed

    private void jTextFieldCDDNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCDDNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCDDNameActionPerformed

    private void jTextFieldCCDVinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCCDVinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCCDVinActionPerformed

    private void jTextFieldCCDLicensePlateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCCDLicensePlateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCCDLicensePlateActionPerformed

    private void jTextFieldCCDModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCCDModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCCDModelActionPerformed

    private void jButtonDDYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDDYesActionPerformed
        DeleteWindow.dispose();
        DeleteSwingWorker deleteSwingWorker = new DeleteSwingWorker();
        deleteSwingWorker.execute();
    }//GEN-LAST:event_jButtonDDYesActionPerformed

    private void jButtonDDNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDDNoActionPerformed
        // TODO add your handling code here:
        DeleteWindow.dispose();
    }//GEN-LAST:event_jButtonDDNoActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        AboutProgram.setLocationRelativeTo(this);
        AboutProgram.setVisible(true);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

        private void jButtonCCDCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCCDCancelActionPerformed
            this.CreateCarDialog.dispose();
        }//GEN-LAST:event_jButtonCCDCancelActionPerformed

        private void jButtonCCDOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCCDOkActionPerformed
            try {
                this.CreateCarDialog.dispose();
                //control input data
                this.controlInputText(this.jTextFieldCCDVin);
                this.controlInputText(this.jTextFieldCCDLicensePlate);
                this.controlInputText(this.jTextFieldCCDModel);

                //get data
                String vin = this.jTextFieldCCDVin.getText();
                String licensePlate = this.jTextFieldCCDLicensePlate.getText();
                String model = this.jTextFieldCCDModel.getText();
                Double mileage = (Double) this.jSpinnerCCDMileage.getValue();

                //create car
                Car car = new Car(null, vin, licensePlate, model, mileage);

                CreateCarSwingWorker createCarSwingWorker = new CreateCarSwingWorker(car);
                createCarSwingWorker.execute();


            } catch (Exception ex) {
                // Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                this.displayInformationDialog(translator.getString("cars.insertError"));
            }


        }//GEN-LAST:event_jButtonCCDOkActionPerformed

        private void jButtonIDCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIDCloseActionPerformed
            this.InformationDialog.setVisible(false);
        }//GEN-LAST:event_jButtonIDCloseActionPerformed

        private void jButtonAPCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAPCloseActionPerformed
            this.AboutProgram.dispose();
        }//GEN-LAST:event_jButtonAPCloseActionPerformed

        private void jButtonOptionsOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOptionsOkActionPerformed
            //ok button - options
            this.localesManager.setLocale((Locale) this.jComboBoxOptionsLanguage.getSelectedItem());
            this.localeChanged();
            this.Options.dispose();
        }//GEN-LAST:event_jButtonOptionsOkActionPerformed

        private void jButtonOptionsCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOptionsCancelActionPerformed
            this.Options.dispose();
        }//GEN-LAST:event_jButtonOptionsCancelActionPerformed

        private void jButtonCDDCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCDDCancelActionPerformed
            this.CreateDriverDialog.dispose();
        }//GEN-LAST:event_jButtonCDDCancelActionPerformed

        private void jButtonCDDOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCDDOkActionPerformed
            try {
                //control input data
                this.CreateDriverDialog.dispose();
                this.controlInputText(this.jTextFieldCDDName);
                this.controlInputText(this.jTextFieldCDDSurname);
                this.controlInputText(this.jTextFieldCDDLicenseId);

                //get data
                String name = this.jTextFieldCDDName.getText();
                String surname = this.jTextFieldCDDSurname.getText();
                String licenseId = this.jTextFieldCDDLicenseId.getText();

                //create driver
                Driver driver = new Driver(null, name, surname, licenseId);


                CreateDriverSwingWorker createDriverSwingWorker = new CreateDriverSwingWorker(driver);
                createDriverSwingWorker.execute();




            } catch (Exception ex) {
                //  Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                this.displayInformationDialog(translator.getString("drivers.insertError"));
            }
        }//GEN-LAST:event_jButtonCDDOkActionPerformed

        private void jComboBoxCRDDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCRDDriverActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_jComboBoxCRDDriverActionPerformed

        private void jButtonCRDCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCRDCancelActionPerformed
            this.CreateRentalDialog.dispose();
        }//GEN-LAST:event_jButtonCRDCancelActionPerformed

        private void jButtonCRDOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCRDOkActionPerformed
            try {
                //get data
                Car car = (Car) this.jComboBoxCRDCar.getSelectedItem();
                Driver driver = (Driver) this.jComboBoxCRDDriver.getSelectedItem();
                Double priceDouble = (Double) this.jSpinnerCRDPrice.getValue();
                Date startDate = this.jXDatePickerCRDStartTime.getDate();
                Date expectedEndDate = this.jXDatePickerCRDExEndTime.getDate();

                //create correct objects
                Calendar startDateCal = Calendar.getInstance();
                startDateCal.setTime(startDate);
                Calendar expectedEndDateCal = Calendar.getInstance();
                expectedEndDateCal.setTime(expectedEndDate);
                BigDecimal price = new BigDecimal(priceDouble);

                //control dates
                if (startDateCal.compareTo(expectedEndDateCal) >= 0) {
                    throw new IllegalAccessException("Start date isnt less than expected end date.");
                }
                if (price.doubleValue() < 0) {
                    throw new IllegalAccessException("Price is lower than zero.");
                }

                //create rental
                Rental rental = new Rental(null, driver, car, price, startDateCal, expectedEndDateCal);
                if (!rentalsManager.isCarFree(car) && rental.getEndTime() == null) {
                    throw new IllegalAccessException("cannot update this car");
                }

                this.rentalsManager.createRental(rental);

                //data was changed, info to datamodel
                switch (customSelection) {
                    case 1:
                        if (car.equals(customCar)) {
                            customRentals.add(rental);
                        }
                        break;
                    case 2:
                        if (driver.equals(customDriver)) {
                            customRentals.add(rental);
                        }
                }
                this.rentalsModel.fireTableDataChanged();

                //hide dialog
                this.CreateRentalDialog.dispose();


            } catch (Exception ex) {
                //Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                this.displayInformationDialog(translator.getString("rentals.insertError"));
            }
        }//GEN-LAST:event_jButtonCRDOkActionPerformed

        private void jComboBoxOptionsLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOptionsLanguageActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_jComboBoxOptionsLanguageActionPerformed

    private void carSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carSearchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_carSearchTextFieldActionPerformed

    private void rentalSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentalSearchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rentalSearchTextFieldActionPerformed

    private void statusBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusBarActionPerformed

    private void jMenuItemRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRefreshActionPerformed
        CarsFireDataChangedSwingWorker carsFireDataChangedSwingWorker = new CarsFireDataChangedSwingWorker();
        carsFireDataChangedSwingWorker.execute();
        DriversFireDataChangedSwingWorker driversFireDataChangedSwingWorker = new DriversFireDataChangedSwingWorker();
        driversFireDataChangedSwingWorker.execute();
        RentalsFireDataChangedSwingWorker rentalsFireDataChangedSwingWorker = new RentalsFireDataChangedSwingWorker();
        rentalsFireDataChangedSwingWorker.execute();
    }//GEN-LAST:event_jMenuItemRefreshActionPerformed

    private void jXDatePickerCRDExEndTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePickerCRDExEndTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jXDatePickerCRDExEndTimeActionPerformed

    private void jXDatePickerCRDStartTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePickerCRDStartTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jXDatePickerCRDStartTimeActionPerformed

    private void endRentalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endRentalButtonActionPerformed
        EndRentalSwingWorker endRentalSwingWorker = new EndRentalSwingWorker();
        endRentalSwingWorker.execute();
    }//GEN-LAST:event_endRentalButtonActionPerformed

    private void customRentalsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customRentalsRadioButtonActionPerformed
        showRentals = 3;
        rentalsSorter.setRowFilter(rentalsFilter);
    }//GEN-LAST:event_customRentalsRadioButtonActionPerformed

        private void jButtonERDOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonERDOkActionPerformed
            try {
                //get data
                Long id = Long.valueOf(this.jTextFieldERDId.getText());
                Car car = (Car) this.jComboBoxERDCar.getSelectedItem();
                Driver driver = (Driver) this.jComboBoxERDDriver.getSelectedItem();
                Double priceDouble = (Double) this.jSpinnerERDPrice.getValue();
                Date startDate = this.jXDatePickerERDStartTime.getDate();
                Date expectedEndDate = this.jXDatePickerERDExEndTime.getDate();
                Date endDate = this.jXDatePickerERDEndTime.getDate();


                //create correct objects
                Calendar startDateCal = Calendar.getInstance();
                startDateCal.setTime(startDate);
                Calendar expectedEndDateCal = Calendar.getInstance();
                expectedEndDateCal.setTime(expectedEndDate);
                BigDecimal price = new BigDecimal(priceDouble);

                //control dates
                if (startDateCal.compareTo(expectedEndDateCal) >= 0) {
                    throw new IllegalAccessException("Start date isnt less than expected end date.");
                }
                if (price.doubleValue() < 0) {
                    throw new IllegalAccessException("Price is lower than zero.");
                }

                //create rental
                Rental rental = new Rental(id, driver, car, price, startDateCal, expectedEndDateCal);

                //set end date
                if (endDate != null) {
                    Calendar endDateCal = Calendar.getInstance();
                    endDateCal.setTime(endDate);

                    //control date
          /*          if (!startDateCal.equals(endDateCal) && startDateCal.after(endDateCal )) {
                     throw new IllegalAccessException("Start date isnt less than end date.");
                     }*/

                    rental.setEndTime(endDateCal);
                } else {
                    rental.setEndTime(null);
                }
                if (!rental.getCar().equals(rentalsManager.findRentalById(id).getCar()) && !rentalsManager.isCarFree(car) && rental.getEndTime() == null) {
                    throw new IllegalAccessException("cannot update this car");
                }

                this.rentalsManager.updateRental(rental);

                //data was changed, info to datamodel
                RentalsFireDataChangedSwingWorker rentalsFireDataChangedSwingWorker = new RentalsFireDataChangedSwingWorker();
                rentalsFireDataChangedSwingWorker.execute();

                //hide dialog
                this.EditRentalDialog.dispose();


            } catch (Exception ex) {
                //   Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                this.displayInformationDialog(translator.getString("rentals.editError"));
            }
        }//GEN-LAST:event_jButtonERDOkActionPerformed

        private void jButtonERDCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonERDCancelActionPerformed
            this.EditRentalDialog.dispose();
        }//GEN-LAST:event_jButtonERDCancelActionPerformed

        private void jComboBoxERDDriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxERDDriverActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_jComboBoxERDDriverActionPerformed

        private void jComboBoxERDCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxERDCarActionPerformed
            // TODO add your handling code here:
        }//GEN-LAST:event_jComboBoxERDCarActionPerformed

    private void jComboBoxCRDCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCRDCarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCRDCarActionPerformed

    private void jTextFieldERDIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldERDIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldERDIdActionPerformed
// </editor-fold>

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // make sure this is only instance of this program
        Utils.initProgram();

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // <editor-fold defaultstate="collapsed" desc="Swing variables"> 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog AboutProgram;
    private javax.swing.JDialog CreateCarDialog;
    private javax.swing.JDialog CreateDriverDialog;
    private javax.swing.JDialog CreateRentalDialog;
    private javax.swing.JDialog DeleteWindow;
    private javax.swing.JDialog EditRentalDialog;
    private javax.swing.JDialog InformationDialog;
    private javax.swing.JDialog Options;
    private javax.swing.JRadioButton activeRentalsRadioButton;
    private javax.swing.JButton addCarButton;
    private javax.swing.JButton addDriverButton;
    private javax.swing.JRadioButton allCarsRadioButton;
    private javax.swing.JRadioButton allRentalsRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton carHistoryButton;
    private javax.swing.JTextField carSearchTextField;
    private javax.swing.JLabel carsSearchLabel;
    private javax.swing.JButton createRentalButton;
    private javax.swing.JRadioButton customRentalsRadioButton;
    private javax.swing.JButton deleteCarButton;
    private javax.swing.JButton deleteDriverButton;
    private javax.swing.JButton deleteRentalButton;
    private javax.swing.JButton driverHistoryButton;
    private javax.swing.JTextField driverSearchTextField;
    private javax.swing.JLabel driversSearchLabel;
    private javax.swing.JButton editRentalButton;
    private javax.swing.JButton endRentalButton;
    private javax.swing.JRadioButton finishedRentalsRadioButton;
    private javax.swing.JRadioButton freeCarsRadioButton;
    private javax.swing.JButton jButtonAPClose;
    private javax.swing.JButton jButtonCCDCancel;
    private javax.swing.JButton jButtonCCDOk;
    private javax.swing.JButton jButtonCDDCancel;
    private javax.swing.JButton jButtonCDDOk;
    private javax.swing.JButton jButtonCRDCancel;
    private javax.swing.JButton jButtonCRDOk;
    private javax.swing.JButton jButtonDDNo;
    private javax.swing.JButton jButtonDDYes;
    private javax.swing.JButton jButtonERDCancel;
    private javax.swing.JButton jButtonERDOk;
    private javax.swing.JButton jButtonIDClose;
    private javax.swing.JButton jButtonOptionsCancel;
    private javax.swing.JButton jButtonOptionsOk;
    private javax.swing.JComboBox jComboBoxCRDCar;
    private javax.swing.JComboBox jComboBoxCRDDriver;
    private javax.swing.JComboBox jComboBoxERDCar;
    private javax.swing.JComboBox jComboBoxERDDriver;
    private javax.swing.JComboBox jComboBoxOptionsLanguage;
    private javax.swing.JLabel jLabelCCDLicensePlate;
    private javax.swing.JLabel jLabelCCDMileage;
    private javax.swing.JLabel jLabelCCDModel;
    private javax.swing.JLabel jLabelCCDVin;
    private javax.swing.JLabel jLabelCDDLicenseId;
    private javax.swing.JLabel jLabelCDDName;
    private javax.swing.JLabel jLabelCDDSurname;
    private javax.swing.JLabel jLabelCRDCar;
    private javax.swing.JLabel jLabelCRDDriver;
    private javax.swing.JLabel jLabelCRDExEndTime;
    private javax.swing.JLabel jLabelCRDPrice;
    private javax.swing.JLabel jLabelCRDStartTime;
    private javax.swing.JLabel jLabelDeleteDialog;
    private javax.swing.JLabel jLabelERDCar;
    private javax.swing.JLabel jLabelERDDriver;
    private javax.swing.JLabel jLabelERDEndTime;
    private javax.swing.JLabel jLabelERDExEndTime;
    private javax.swing.JLabel jLabelERDId;
    private javax.swing.JLabel jLabelERDPrice;
    private javax.swing.JLabel jLabelERDStartTime;
    private javax.swing.JLabel jLabelOptionsLanguage;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemOptions;
    private javax.swing.JMenuItem jMenuItemRefresh;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelCars;
    private javax.swing.JPanel jPanelDrivers;
    private javax.swing.JPanel jPanelRentals;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSpinner jSpinnerCCDMileage;
    private javax.swing.JSpinner jSpinnerCRDPrice;
    private javax.swing.JSpinner jSpinnerERDPrice;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTableCars;
    private javax.swing.JTable jTableDrivers;
    private javax.swing.JTable jTableRentals;
    private javax.swing.JTextArea jTextAreaAboutProgram;
    private javax.swing.JTextArea jTextAreaIDinformation;
    private javax.swing.JTextField jTextFieldCCDLicensePlate;
    private javax.swing.JTextField jTextFieldCCDModel;
    private javax.swing.JTextField jTextFieldCCDVin;
    private javax.swing.JTextField jTextFieldCDDLicenseId;
    private javax.swing.JTextField jTextFieldCDDName;
    private javax.swing.JTextField jTextFieldCDDSurname;
    private javax.swing.JTextField jTextFieldERDId;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerCRDExEndTime;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerCRDStartTime;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerERDEndTime;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerERDExEndTime;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerERDStartTime;
    private javax.swing.JTextField rentalSearchTextField;
    private javax.swing.JLabel rentalsSearchLabel;
    private javax.swing.JRadioButton rentedCarsRadioButton;
    private javax.swing.JTextField statusBar;
    // End of variables declaration//GEN-END:variables
// </editor-fold>

    private void initManagers() throws ServiceFailureException {
        int numTries = 0;
        Properties prop = new Properties();
        BasicDataSource dataSource;
        try {
            prop.load(new FileInputStream("db.properties"));

            dataSource = new BasicDataSource();
            dataSource.setUrl(prop.getProperty("url"));
            dataSource.setUsername(prop.getProperty("username"));
            dataSource.setPassword(prop.getProperty("password"));

        } catch (IOException ex) {
            logger.error("Internal error: couldn't load properties", ex);
            throw new ServiceFailureException("Internal error: couldn't load properties", ex);
        }
        while (true) {

            try {
                carsManager = new CarsManager(dataSource);
                driversManager = new DriversManager(dataSource);
                rentalsManager = new RentalsManager(dataSource);

                carsModel = new CarsTableModel(carsManager, this);
                driversModel = new DriversTableModel(driversManager, this);
                rentalsModel = new RentalsTableModel(rentalsManager);


                freeCarComboBoxModel = new FreeCarComboBoxModel(rentalsManager);
                carComboBoxModel = new CarComboBoxModel(carsManager);
                driverComboBoxModel = new DriverComboBoxModel(driversManager);
                break;
            } catch (Exception e) {
                numTries++;
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (numTries == 3) {
                    openDBFailWindow();
                    logger.error("Connection to db failed " + e);
                    System.exit(2);
                }
            }
        }
    }

    private void controlInputText(JTextField textField) throws IllegalAccessException {
        if (textField.getText().isEmpty()) {
            textField.setBackground(Color.YELLOW);
            throw new IllegalAccessException("TextField is Empty");
        } else {
            textField.setBackground(Color.white);
        }
    }
    // <editor-fold defaultstate="collapsed" desc="Clear dialogs functions"> 

    private void displayInformationDialog(String text) {
        this.jTextAreaIDinformation.setText(text);
        this.InformationDialog.setLocationRelativeTo(this);
        this.InformationDialog.setVisible(true);
    }

    private void clearCreateCarDialog() {
        this.jTextFieldCCDVin.setText("");
        this.jTextFieldCCDModel.setText("");
        this.jTextFieldCCDLicensePlate.setText("");
        this.jSpinnerCCDMileage.setValue(new Double(20000));
    }

    private void clearCreateDriverDialog() {
        this.jTextFieldCDDName.setText("");
        this.jTextFieldCDDSurname.setText("");
        this.jTextFieldCDDLicenseId.setText("");
    }

    private void clearCreateRentalDialog() {
        Calendar today = Calendar.getInstance();
        Calendar tomorrow = Calendar.getInstance();
        tomorrow.add(Calendar.DATE, 1);

        this.jSpinnerCRDPrice.setValue(new Double(1000));
        this.jXDatePickerCRDStartTime.setDate(new Date(Calendar.getInstance().getTimeInMillis()));
        this.jXDatePickerCRDExEndTime.setDate(new Date(tomorrow.getTimeInMillis()));
        this.jComboBoxCRDCar.setSelectedIndex(0);
        this.jComboBoxCRDDriver.setSelectedIndex(0);
    }
    // </editor-fold>

    private void initSortingFiltering() {
        //<snip>Setup filtering for winners 
        carsSorter = new TableRowSorter<>(carsModel);
        jTableCars.setRowSorter(carsSorter);
        driversSorter = new TableRowSorter<>(driversModel);
        jTableDrivers.setRowSorter(driversSorter);
        rentalsSorter = new TableRowSorter<>(rentalsModel);
        jTableRentals.setRowSorter(rentalsSorter);

        carsFilter = new RowFilter<CarsTableModel, Integer>() {
            public boolean include(Entry<? extends CarsTableModel, ? extends Integer> entry) {
                boolean isFree = false;
                //  CarsTableModel carsModel = entry.getModel();
                Car car = carsModel.getCar(entry.getIdentifier().intValue());
                Pattern p = Pattern.compile(".*" + filterCars + ".*", Pattern.CASE_INSENSITIVE);
                if (showCars != 0) {
                    try {
                        isFree = rentalsManager.isCarFree(car);
                        failedOnce = false;
                    } catch (Exception ex) {
                        if (!failedOnce) {
                            openDBFailWindow();
                            failedOnce = true;
                        }
                        return false;
                    }
                }
                switch (showCars) {
                    case 1:
                        if (isFree) {
                            break;
                        }
                        return false;

                    case 2:
                        if (!isFree) {
                            break;
                        }
                        return false;
                }


                if (car.getName() != null && p.matcher(car.getName()).matches()) {
                    return true;
                }
                if (car.getSpz() != null && p.matcher(car.getSpz()).matches()) {
                    return true;
                }
                if (car.getVin() != null && p.matcher(car.getVin()).matches()) {
                    return true;
                }

                return false;
            }
        };
        driversFilter = new RowFilter<DriversTableModel, Integer>() {
            public boolean include(Entry<? extends DriversTableModel, ? extends Integer> entry) {

                // DriversTableModel carsModel = entry.getModel();
                Driver driver = driversModel.getDriver(entry.getIdentifier().intValue());
                Pattern p = Pattern.compile(".*" + filterDrivers + ".*", Pattern.CASE_INSENSITIVE);

                if (driver.getName() != null && p.matcher(driver.getName()).matches()) {
                    return true;
                }
                if (driver.getSurname() != null && p.matcher(driver.getSurname()).matches()) {
                    return true;
                }
                if (driver.getLicenseId() != null && p.matcher(driver.getLicenseId()).matches()) {
                    return true;
                }
                return false;
            }
        };
        rentalsFilter = new RowFilter<RentalsTableModel, Integer>() {
            public boolean include(RowFilter.Entry<? extends RentalsTableModel, ? extends Integer> entry) {

                RentalsTableModel rentalsModel = entry.getModel();
                Rental rental = rentalsModel.getRental(entry.getIdentifier().intValue());
                Pattern p = Pattern.compile(".*" + filterRentals + ".*", Pattern.CASE_INSENSITIVE);

                switch (showRentals) {
                    case 1: // active rentals
                        if (rental.getEndTime() == null) {
                            break;
                        }
                        return false;
                    case 2: // finished rentals
                        if (rental.getEndTime() != null) {
                            break;
                        }
                        return false;
                    case 3: // custom selection
                        if (customSelection != 0 && customRentals.contains(rental)) {
                            break;
                        }
                        return false;
                }

                if (rental.getDriver() != null && p.matcher(rental.getDriver().toString()).matches()) {
                    return true;
                }
                if (rental.getCar() != null && p.matcher(rental.getCar().toString()).matches()) {
                    return true;
                }
                if (rental.getPrice() != null && p.matcher(rental.getPrice().toString()).matches()) {
                    return true;
                }
                DateFormat formating = DateFormat.getDateInstance(); //new SimpleDateFormat("dd/MM/yyyy");

                if (rental.getStartTime() != null) {
                    String st = formating.format(rental.getStartTime().getTime());
                    if (p.matcher(st).matches()) {
                        return true;
                    }
                }
                if (rental.getEndTime() != null) {
                    String st = formating.format(rental.getEndTime().getTime());
                    if (p.matcher(st).matches()) {
                        return true;
                    }
                }
                if (rental.getExpectedEndTime() != null) {
                    String st = formating.format(rental.getExpectedEndTime().getTime());
                    if (p.matcher(st).matches()) {
                        return true;
                    }
                }
                return false;
            }
        };
    }

    private void initComponents2() {
        jTableCars.getTableHeader().setReorderingAllowed(false);
        jTableDrivers.getTableHeader().setReorderingAllowed(false);
        jTableRentals.getTableHeader().setReorderingAllowed(false);

        //  carsModel.addTableModelListener(carsModel);
        ForRentalsTableListener forRentalsTableListener = new ForRentalsTableListener();
        carsModel.addTableModelListener(forRentalsTableListener);
        driversModel.addTableModelListener(forRentalsTableListener);
        rentalsModel.addTableModelListener(rentalsModel);

        carSearchTextField.getDocument().addDocumentListener(new SearchCarsFilterListener(this));
        driverSearchTextField.getDocument().addDocumentListener(new SearchDriversFilterListener(this));
        rentalSearchTextField.getDocument().addDocumentListener(new SearchRentalsFilterListener(this));
    }

    protected class CarsFireDataChangedSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {

            carsModel.fireTableDataChanged();
            return null;
        }
    }

    protected class DriversFireDataChangedSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {

            driversModel.fireTableDataChanged();
            return null;
        }
    }

    protected class RentalsFireDataChangedSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {


            rentalsModel.fireTableDataChanged();
            return null;
        }
    }

    protected class DeleteCarSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {

            if (jTableCars.isEditing()) {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("rental.stopEditRow"));
                status.execute();
                return null;
            }
            int row = jTableCars.getSelectedRow();
            if (row != -1) {
                Car car = carsModel.getCar(jTableCars.convertRowIndexToModel(row));
                try {
                    if (rentalsManager.findHistoryOfRental(car).isEmpty()) {
                        deleteChoice = 0;
                        DeleteWindow.setLocationRelativeTo(MainWindow.this);
                        DeleteWindow.setVisible(true);
                    } else {

                        SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("general.cantDelete") + car + translator.getString("general.isUsed"));
                        status.execute();
                    }
                } catch (Exception x) {
                    openDBFailWindow();

                }
            } else {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("general.selectRow"));
                status.execute();
            }
            return null;
        }
    }

    protected class DeleteDriverSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {

            if (jTableDrivers.isEditing()) {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("rental.stopEditRow"));
                status.execute();
                return null;
            }
            int row = jTableDrivers.getSelectedRow();
            if (row != -1) {
                Driver driver = driversModel.getDriver(jTableDrivers.convertRowIndexToModel(row));
                try {
                    if (rentalsManager.findHistoryOfRental(driver).isEmpty()) {
                        deleteChoice = 1;
                        DeleteWindow.setLocationRelativeTo(MainWindow.this);
                        DeleteWindow.setVisible(true);
                    } else {

                        SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("general.cantDelete") + driver + translator.getString("general.isUsed"));
                        status.execute();
                    }
                } catch (Exception x) {
                    openDBFailWindow();

                }
            } else {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("general.selectRow"));
                status.execute();
            }
            return null;

        }
    }

    protected class EndRentalSwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {

            if (jTableRentals.isEditing()) {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("rental.stopEditRow"));
                status.execute();
                return null;
            }
            int row = jTableRentals.getSelectedRow();
            if (row != -1) {
                int view = row;
                row = jTableRentals.getRowSorter().convertRowIndexToModel(row);

                Rental rental = rentalsModel.getRental(row);
                if (rental.getEndTime() == null) {

                    if (!Calendar.getInstance().after(rental.getStartTime())) {
                        SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("rental.selectedRentalInFuture"));
                        status.execute();
                        return null;
                    }

                    rentalsManager.endRental(rental);
                    rentalsModel.fireTableCellUpdated(view, 6);

                } else {
                    SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("rental.isEnded"));
                    status.execute();
                }

            } else {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("general.selectRow"));
                status.execute();
            }
            return null;
        }
    }

    protected class CarHistorySwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {


            if (jTableCars.isEditing()) {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("rental.stopEditRow"));
                status.execute();
                return null;
            }
            int row = jTableCars.getSelectedRow();
            if (row != -1) {
                Car car = carsModel.getCar(jTableCars.convertRowIndexToModel(row));
                customSelection = 1;
                try{
                customRentals = rentalsManager.findHistoryOfRental(car);
                } catch (Exception ex) {
                    openDBFailWindow();
                     customSelection = 0;
                    return null;
                }
                customCar = car;
                rentalsSorter.setRowFilter(rentalsFilter);

                customRentalsRadioButton.setToolTipText(translator.getString("cars.showHistory") + car + " " + car.getVin());
                customRentalsRadioButton.setSelected(true);
                customRentalsRadioButton.doClick();
                jTabbedPane2.setSelectedIndex(2);
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("cars.showHistory") + car);
                status.execute();
            } else {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("general.selectRow"));
                status.execute();
            }
            return null;
        }
    }

    protected class DriverHistorySwingWorker extends SwingWorker<Void, Void> {

        @Override
        protected Void doInBackground() throws Exception {

            if (jTableDrivers.isEditing()) {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("rental.stopEditRow"));
                status.execute();
                return null;
            }
            int row = jTableDrivers.getSelectedRow();
            if (row != -1) {
                Driver driver = driversModel.getDriver(jTableDrivers.convertRowIndexToModel(row));
                customSelection = 2;
                try {
                    customRentals = rentalsManager.findHistoryOfRental(driver);
                    customDriver = driver;
                } catch (Exception ex) {
                    openDBFailWindow();
                     customSelection = 0;
                    return null;
                }
                rentalsSorter.setRowFilter(rentalsFilter);
                customRentalsRadioButton.setToolTipText(translator.getString("drivers.showHistory") + driver + " " + driver.getName());
                customRentalsRadioButton.setSelected(true);
                customRentalsRadioButton.doClick();
                jTabbedPane2.setSelectedIndex(2);
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("drivers.showHistory") + driver);
                status.execute();
            } else {
                SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, translator.getString("general.selectRow"));
                status.execute();
            }
            return null;
        }
    }

    protected class CreateCarSwingWorker extends SwingWorker<Void, Void> {

        private boolean dbSucces = false;
        private Car car;

        public CreateCarSwingWorker(Car car) {
            this.car = car;
        }

        @Override
        protected Void doInBackground() throws Exception {
            try {
                carsManager.createCar(car);
                dbSucces = true;
            } catch (Exception ex) {
                openDBFailWindow();
            }

            return null;
        }

        @Override
        protected void done() {
            if (dbSucces) {
                carsModel.addCar(car);
                carsModel.fireTableDataChanged();
            }
        }
    }

    protected class CreateDriverSwingWorker extends SwingWorker<Void, Void> {

        private boolean dbSucces = false;
        private Driver driver;

        public CreateDriverSwingWorker(Driver driver) {
            this.driver = driver;
        }

        @Override
        protected Void doInBackground() throws Exception {
            try {
                driversManager.createDriver(driver);
                dbSucces = true;
            } catch (Exception ex) {
                openDBFailWindow();
            }

            return null;
        }

        @Override
        protected void done() {
            if (dbSucces) {
                driversModel.addDriver(driver);
                driversModel.fireTableDataChanged();
            }
        }
    }

    protected class DeleteSwingWorker extends SwingWorker<Void, Void> {

        private boolean dbSucces = false;
        private Car car;
        private Driver driver;
        private Rental rental;
        private String message;
        private int selectedRow;
        private int row;

        @Override
        protected Void doInBackground() throws Exception {
            switch (deleteChoice) {
                case 0:
                    selectedRow = jTableCars.getSelectedRow();
                    row = jTableCars.getRowSorter().convertRowIndexToModel(selectedRow);
                    car = carsModel.getSelectedCar(jTableCars);
                    try {
                        carsManager.deleteCar(car);
                        dbSucces = true;
                    } catch (Exception ex) {
                        openDBFailWindow();
                    }
                    break;
                case 1:
                    selectedRow = jTableDrivers.getSelectedRow();
                    row = jTableDrivers.getRowSorter().convertRowIndexToModel(selectedRow);
                    driver = driversModel.getSelectedDriver(jTableDrivers);
                    try {
                        driversManager.deleteDriver(driver);
                        dbSucces = true;
                    } catch (Exception ex) {
                        openDBFailWindow();
                    }
                    break;
                case 2:
                    break;

            }
            return null;

        }

        @Override
        protected void done() {
            if (!dbSucces) {
                return;
            }

            switch (deleteChoice) {
                case 0:

                    carsModel.removeCar(car);
                    carsModel.fireTableRowsDeleted(row, row);
                    message = translator.getString("rentals.car") + " : " + car + " " + translator.getString("general.wasDeleted");
                    if (jTableCars.getRowSorter().getViewRowCount() > selectedRow) {
                        jTableCars.setRowSelectionInterval(selectedRow, selectedRow);

                    } else {
                        jTableCars.setRowSelectionInterval(selectedRow - 1, selectedRow - 1);
                    }
                    break;
                case 1:
                    driversModel.removeDriver(driver);
                    driversModel.fireTableRowsDeleted(row, row);
                    message = translator.getString("rentals.driver") + " : " + driver + " " + translator.getString("general.wasDeleted");
                    if (jTableDrivers.getRowSorter().getViewRowCount() > selectedRow) {
                        jTableDrivers.setRowSelectionInterval(selectedRow, selectedRow);

                    } else {
                        jTableDrivers.setRowSelectionInterval(selectedRow - 1, selectedRow - 1);
                    }

                    break;
                case 2:
                    rental = rentalsModel.removeRow(jTableRentals);
                    message = "Rental : " + rental + " was deleted";
                    break;

            }

            SetStatusBarSwingWorker status = new SetStatusBarSwingWorker(statusBar, message);
            status.execute();


        }
    }

    private void localeChanged() {
        translator = ResourceBundle.getBundle("common.messages", this.localesManager.getLocale());
        this.setLocale(this.localesManager.getLocale());
        //this.setLocale(this.localesManager.getLocale());
        carsModel.setColumnNames();
        carsModel.fireTableStructureChanged();
        driversModel.setColumnNames(translator);
        driversModel.fireTableStructureChanged();
        rentalsModel.setColumnNames(translator);
        rentalsModel.fireTableStructureChanged();

        this.changeText();
        this.invalidate();
    }

    protected class ForRentalsTableListener implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent e) {
            rentalsModel.fireTableDataChanged();
        }
    }

    private void openDBFailWindow() {
        logger.error("Connection to db failed");
        FailWindow dialog = new FailWindow(null);
        dialog.setLocationRelativeTo(MainWindow.this);
        dialog.setVisible(true);
    }

    private void changeText() {
        //menu
        this.jMenu4.setText(translator.getString("menu"));
        this.jMenuItemRefresh.setText(translator.getString("menu.refresh"));
        this.jMenuItemOptions.setText(translator.getString("menu.options"));
        this.jMenuItemAbout.setText(translator.getString("menu.aboutProgram"));
        this.jMenuItemExit.setText(translator.getString("menu.exit"));

        //option dialog
        this.Options.setTitle(translator.getString("options.title"));
        this.jButtonOptionsOk.setText(translator.getString("general.ok"));
        this.jButtonOptionsCancel.setText(translator.getString("general.cancel"));
        this.jLabelOptionsLanguage.setText(translator.getString("options.language"));

        //about dialog
        this.AboutProgram.setTitle(translator.getString("aboutProgram.title"));
        this.jTextAreaAboutProgram.setText(translator.getString("aboutProgram.text"));
        this.jButtonAPClose.setText(translator.getString("general.close"));

        //tabbed panel
        this.jTabbedPane2.setTitleAt(0, translator.getString("panel.cars"));
        this.jTabbedPane2.setTitleAt(1, translator.getString("panel.drivers"));
        this.jTabbedPane2.setTitleAt(2, translator.getString("panel.rentals"));

        //car section
        this.carsSearchLabel.setText(translator.getString("toolbox.search"));
        this.allCarsRadioButton.setText(translator.getString("cars.all"));
        this.rentedCarsRadioButton.setText(translator.getString("cars.rented"));
        this.freeCarsRadioButton.setText(translator.getString("cars.free"));
        this.addCarButton.setText(translator.getString("cars.addCar"));
        this.deleteCarButton.setText(translator.getString("cars.deleteCar"));
        this.carHistoryButton.setText(translator.getString("cars.carHistory"));

        ///create car dialog
        this.CreateCarDialog.setTitle(translator.getString("cars.addCar"));
        this.jLabelCCDVin.setText(translator.getString("cars.vin"));
        this.jLabelCCDLicensePlate.setText(translator.getString("cars.licensePlate"));
        this.jLabelCCDMileage.setText(translator.getString("cars.mileage"));
        this.jLabelCCDModel.setText(translator.getString("cars.model"));
        this.jButtonCCDOk.setText(translator.getString("general.ok"));
        this.jButtonCCDCancel.setText(translator.getString("general.cancel"));

        //create driver dialog
        this.CreateDriverDialog.setTitle(translator.getString("drivers.addDriver"));
        this.jLabelCDDLicenseId.setText(translator.getString("drivers.licenseId"));
        this.jLabelCDDName.setText(translator.getString("drivers.name"));
        this.jLabelCDDSurname.setText(translator.getString("drivers.surname"));
        this.jButtonCDDOk.setText(translator.getString("general.ok"));
        this.jButtonCDDCancel.setText(translator.getString("general.cancel"));

        //create rental dialog
        this.CreateRentalDialog.setTitle(translator.getString("rentals.createRental"));
        this.jLabelCRDCar.setText(translator.getString("rentals.car"));
        this.jLabelCRDDriver.setText(translator.getString("rentals.driver"));
        this.jLabelCRDPrice.setText(translator.getString("rentals.price"));
        this.jLabelCRDStartTime.setText(translator.getString("rentals.startTime"));
        this.jLabelCRDExEndTime.setText(translator.getString("rentals.expectedEndTime"));
        this.jXDatePickerCRDStartTime.setLocale(this.localesManager.getLocale());
        this.jXDatePickerCRDExEndTime.setLocale(this.localesManager.getLocale());
        this.jButtonCRDOk.setText(translator.getString("general.ok"));
        this.jButtonCRDCancel.setText(translator.getString("general.cancel"));

        //edit rental dialog
        this.EditRentalDialog.setTitle(translator.getString("rentals.editRental"));
        this.jLabelERDId.setText(translator.getString("rentals.id"));
        this.jLabelERDCar.setText(translator.getString("rentals.car"));
        this.jLabelERDDriver.setText(translator.getString("rentals.driver"));
        this.jLabelERDPrice.setText(translator.getString("rentals.price"));
        this.jLabelERDStartTime.setText(translator.getString("rentals.startTime"));
        this.jLabelERDExEndTime.setText(translator.getString("rentals.expectedEndTime"));
        this.jLabelERDEndTime.setText(translator.getString("rentals.expectedEndTime"));
        this.jXDatePickerERDStartTime.setLocale(this.localesManager.getLocale());
        this.jXDatePickerERDExEndTime.setLocale(this.localesManager.getLocale());
        this.jXDatePickerERDEndTime.setLocale(this.localesManager.getLocale());
        this.jButtonERDOk.setText(translator.getString("general.ok"));
        this.jButtonERDCancel.setText(translator.getString("general.cancel"));

        //information dialog
        this.InformationDialog.setTitle(translator.getString("informationDialog.title"));
        this.jButtonIDClose.setText(translator.getString("general.close"));

        //delete dialog
        this.DeleteWindow.setTitle(translator.getString("deleteDialog.title"));
        this.jLabelDeleteDialog.setText(translator.getString("deleteDialog.text"));
        this.jButtonDDNo.setText(translator.getString("general.no"));
        this.jButtonDDYes.setText(translator.getString("general.yes"));

        //driver section
        this.driversSearchLabel.setText(translator.getString("toolbox.search"));
        this.addDriverButton.setText(translator.getString("drivers.addDriver"));
        this.deleteDriverButton.setText(translator.getString("drivers.deleteDriver"));
        this.driverHistoryButton.setText(translator.getString("drivers.driverHistory"));

        //rental section
        this.rentalsSearchLabel.setText(translator.getString("toolbox.search"));
        this.allRentalsRadioButton.setText(translator.getString("rentals.all"));
        this.activeRentalsRadioButton.setText(translator.getString("rentals.rented"));
        this.finishedRentalsRadioButton.setText(translator.getString("rentals.finished"));
        this.customRentalsRadioButton.setText(translator.getString("rentals.custom"));
        this.createRentalButton.setText(translator.getString("rentals.createRental"));
        this.deleteRentalButton.setText(translator.getString("rentals.deleteRental"));
        this.editRentalButton.setText(translator.getString("rentals.editRental"));
        this.endRentalButton.setText(translator.getString("rentals.endRental"));

    }

// <editor-fold defaultstate="collapsed" desc="Getters and Setters">    
    public RowFilter<CarsTableModel, Integer> getCarsFilter() {
        return carsFilter;
    }

    public void setFilterCars(String filterCars) {
        this.filterCars = filterCars;
    }

    public TableRowSorter<CarsTableModel> getCarsSorter() {
        return carsSorter;
    }

    public void setCarsSorter(TableRowSorter<CarsTableModel> carsSorter) {
        this.carsSorter = carsSorter;
    }

    public TableRowSorter<DriversTableModel> getDriversSorter() {
        return driversSorter;
    }

    public void setDriversSorter(TableRowSorter<DriversTableModel> driversSorter) {
        this.driversSorter = driversSorter;
    }

    public TableRowSorter<RentalsTableModel> getRentalsSorter() {
        return rentalsSorter;
    }

    public void setRentalsSorter(TableRowSorter<RentalsTableModel> rentalsSorter) {
        this.rentalsSorter = rentalsSorter;
    }

    public RowFilter<DriversTableModel, Integer> getDriversFilter() {
        return driversFilter;
    }

    public void setFilterDrivers(String filterDrivers) {
        this.filterDrivers = filterDrivers;
    }

    public CarsManager getCarsManager() {
        return carsManager;
    }

    public void setCarsManager(CarsManager carsManager) {
        this.carsManager = carsManager;
    }

    public DriversManager getDriversManager() {
        return driversManager;
    }

    public void setDriversManager(DriversManager driversManager) {
        this.driversManager = driversManager;
    }

    public RentalsManager getRentalsManager() {
        return rentalsManager;
    }

    public void setRentalsManager(RentalsManager rentalsManager) {
        this.rentalsManager = rentalsManager;
    }

    public CarsTableModel getCarsModel() {
        return carsModel;
    }

    public void setCarsModel(CarsTableModel carsModel) {
        this.carsModel = carsModel;
    }

    public DriversTableModel getDriversModel() {
        return driversModel;
    }

    public void setDriversModel(DriversTableModel driversModel) {
        this.driversModel = driversModel;
    }

    public String getFilterRentals() {
        return filterRentals;
    }

    public void setFilterRentals(String filterRentals) {
        this.filterRentals = filterRentals;
    }

    public int getShowCars() {
        return showCars;
    }

    public void setShowCars(int showCars) {
        this.showCars = showCars;
    }

    public int getShowRentals() {
        return showRentals;
    }

    public void setShowRentals(int showRentals) {
        this.showRentals = showRentals;
    }

    public int getDeleteChoice() {
        return deleteChoice;
    }

    public void setDeleteChoice(int deleteChoice) {
        this.deleteChoice = deleteChoice;
    }

    public JDialog getDeleteWindow() {
        return DeleteWindow;
    }

    public void setDeleteWindow(JDialog DeleteWindow) {
        this.DeleteWindow = DeleteWindow;
    }

    public JTable getjTableCars() {
        return jTableCars;
    }

    public void setjTableCars(JTable jTableCars) {
        this.jTableCars = jTableCars;
    }

    public JTable getjTableDrivers() {
        return jTableDrivers;
    }

    public void setjTableDrivers(JTable jTableDrivers) {
        this.jTableDrivers = jTableDrivers;
    }

    public JTable getjTableRentals() {
        return jTableRentals;
    }

    public void setjTableRentals(JTable jTableRentals) {
        this.jTableRentals = jTableRentals;
    }

    public JTextField getStatusBar() {
        return statusBar;
    }

    public void setStatusBar(JTextField statusBar) {
        this.statusBar = statusBar;
    }

    public static Object getLock() {
        return LOCK;
    }

    public RentalsTableModel getRentalsModel() {
        return rentalsModel;
    }

    public void setRentalsModel(RentalsTableModel rentalsModel) {
        this.rentalsModel = rentalsModel;
    }

    public RowFilter<RentalsTableModel, Integer> getRentalsFilter() {
        return rentalsFilter;
    }

    public void setRentalsFilter(RowFilter<RentalsTableModel, Integer> rentalsFilter) {
        this.rentalsFilter = rentalsFilter;
    }

    public static ResourceBundle getTranslator() {
        return translator;
    }
// </editor-fold>
}
